#Some of these might not work intially. You may have to install them on your Python Complier
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
import glob
from PIL import Image
import os
from natsort import natsorted

#Import the data from the Labview text file, assuming that the delimiter is a tab and that the first 23 rows are headers
data = np.loadtxt('Thermal_Animation.txt', delimiter='\t', skiprows=23)
time = data[:,0]
#Turn the time array from seconds into minutes by dividing by 60. This may bug if the data was not collected by the second.
timeMin = time/60
batteryTemp = data[:,4]
chamberTemp = data[:,5]
voltage = data[:,2]
current = -1 * data[:,1]

#This imports all .jpeg files in a folder into a single list. This may bug if there are jpeg files other than the thermal images in the folder.
thermalImages = glob.glob('Battery Test 7.13.23/*.jpeg')
#The previous line incorrectly sorts the jpeg files, so natsorted puts them in the correct order.
sortedThermalImages = natsorted(thermalImages)

#This section converts the images in the "sortedThermalImages" variable into a different variable type which can be used with matplotlib
frames = []
for i in sortedThermalImages:
    img = np.asarray(Image.open(i))
    frames.append(img)

#The thermal camera is set to capture an image every minute. The "length" variable is the number of minutes that the test runs
length = len(frames)

#This creates dummy arrays for the primitive system for creating the gif
x = []
y1 = []
y2 = []
y3 = []
y4 = []

#This section creates the plots
for i in range(length):
    fig, (plot1, plot2, plot3) = plt.subplots(1, 3, figsize=(15, 5))
    fig.subplots_adjust(wspace=0.5)
    #This code was bogging down the computer, so in order to cut the processing and make this run faster, the code takes a data point every minute instead of every second from each variable's array.
    #It appends because the program complies the full graph one data point at a time.
    x.append(timeMin[i*60])
    y1.append(batteryTemp[i*60])
    y2.append(chamberTemp[i*60])
    y3.append(voltage[i*60])
    y4.append(current[i*60])
     
    # This first sections plots the temperature graph.
    plot1.plot(x, y1, color = 'blue')
    plot1.plot(x,y2, color = 'red')
    plot1.set_title("Time (min) vs. Temperature (°C)")
    plot1.set_xlabel('Time (min)')
    plot1.set_ylabel('Temperature (°C)')
    plot1.set_xlim([0,max(timeMin)])
    plot1.set_ylim([min(chamberTemp),max(batteryTemp)])
    plot1.legend(['Battery Temp', 'Chamber Temp'], loc = 'upper left')

    #This section plots the voltage graph
    plot2.plot(x,y3, color = 'blue', label = 'Voltage')
    plot2.set_title("Time (min) vs. Voltage (V) and Current (A)")
    plot2.set_xlabel('Time (min)')
    plot2.set_ylabel('Voltage (V)')
    plot2.set_xlim([0,max(timeMin)])
    plot2.set_ylim([min(voltage),max(voltage)])
    plotpower = plot2.twinx()
    plotpower.plot(x,y4, color = "red", label = 'Current')
    plotpower.set_ylabel('Current (A)')
    plotpower.set_xlim([0,max(timeMin)])
    plotpower.set_ylim([np.average(current)-np.average(current)/2,np.average(current)+np.average(current)/2])
    lines, labels = plot2.get_legend_handles_labels()
    lines2, labels2 = plotpower.get_legend_handles_labels()
    plotpower.legend(lines + lines2, labels + labels2, loc="upper right")

    #This section plots the thermal images
    plot3.imshow(frames[i])
    plot3.xaxis.set_visible(False)
    plot3.yaxis.set_visible(False)
    plot3.set_title('Thermal Image of Battery')

    #This saves each individual figure as a .png file in the folder. When you get to the last plot, it saves an additional 20 frames so that the GIF appears to pause at the end of the loop
    plt.savefig('Plot_{}.png'.format(i))
    if i == length-1:
        for j in range(length, length+20):
            plt.savefig('Plot_{}.png'.format(j))
    plt.close()


#This section creates an empty array to be used later. Like before, the glob function takes every .png file in the folder and compiles it into one array, and then the natsorted function sorts it correctly.
#If there are other .png files in the folder then this will be buggy.
frames = []
imgs = glob.glob("*.png")
sortedImages = natsorted(imgs)

#This creates an array that reforms the previous section into a variable type that can be used in the next section.
for i in sortedImages:
    new_frame = Image.open(i)
    frames.append(new_frame)


#This compiles all of the sorted .png files into a single gif. 
frames[0].save('Thermal Image and Graph.gif', format='GIF',
               append_images=frames[1:],
               save_all=True,
               duration=150, loop=0)

#This deletes all of the .png files after the program is done running so that the folder isn't swamped by useless files.
for i in range((len(frames))):
    os.remove('Plot_{}.png'.format(i))
