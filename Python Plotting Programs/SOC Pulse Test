#This python code is for plotting the SOC pulse discharge tests. It uses the both the 10% SOC and the 5% SOC cycle .txt files at once.
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

#importing data from .txt files as an array
#column order is (0) time, (1) Current, (2) Voltage, (3) Power, (4) Battery Temp, and (5) Chamber Temp
tenSOCdata = np.loadtxt('10SOCcyle_004.txt', delimiter="\t", skiprows=14)
fiveSOCdata = np.loadtxt('5SOCcyle4.txt', delimiter="\t", skiprows=14)

#adding the time of the 10% SOC data to the 5% SOC data to show that the 5% test immediately follows the 10% test
tenTime = (max(tenSOCdata[:,0]))
fiveSOCdata[:,0] = fiveSOCdata[:,0] + tenTime

#creating variables for time, voltage, and temperature by appending the 5% SOC data to the 10% SOC data
time = np.append(tenSOCdata[:,0],fiveSOCdata[:,0])
voltage = np.append(tenSOCdata[:,2],fiveSOCdata[:,2])
batteryTemp = np.append(tenSOCdata[:,4], fiveSOCdata[:,4])
chamberTemp = np.append(tenSOCdata[:,5], fiveSOCdata[:,5])

time= time/3600

#plotting temperature and voltage figures
fig1 = plt.figure()
plt.plot(time, chamberTemp, color = "tab:blue")
plt.plot(time, batteryTemp, color = "tab:red")
plt.legend(["Chamber Temperature", "Battery Temperature"])
plt.title("Battery Temperature vs. Time at X°C")
plt.xlabel("Time (hrs)")
plt.ylabel("Temperature (°C)")
plt.savefig("Temperature Graph X°C.png")


fig2 = plt.figure()
plt.plot(time, voltage)
plt.title("Voltage vs. Time at X°C")
plt.xlabel("Time (hrs)")
plt.ylabel("Voltage (V)")
plt.savefig("Voltage Graph X°C.png")

#use PdfPages to combine the plots into a single PDF file and then saving it
plots = PdfPages('SOC Graphs X°C.pdf')
plots.savefig(fig1)
plots.savefig(fig2)
plots.close()
